bootstrap.servers=127.0.0.1:9092
key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
#等到有足够的响应字节数后(或是超时),服务端才返回
fetch.min.bytes=1
group.id=group1
#心跳间隔，给ZK汇报是否在线
heartbeat.interval.ms=3000
#每个分区能返回的最大字节数
max.partition.fetch.bytes=1048576
#长时间没有收到心跳，就被broker认为断线
session.timeout.ms=10000
#服务重启重置offset的策略 earliest latest none
auto.offset.reset=latest
#连接最大闲置时间
connections.max.idle.ms=540000
#后台默认周期性提交
enable.auto.commit=true
#排除内部topic(比如说offset topic)
exclude.internal.topics=true
#一次fetch 服务端最大返回字节数(若某消息本身大于此设置，正常返回)
fetch.max.bytes=52428800
#超过这个时间consumer还没有参与轮询，就让此consumer失效
max.poll.interval.ms=300000
#一次请求最多拉去指定数量消息
max.poll.records=500
#在分组管理中，每个consumer根据指定算法找到要负责消费哪个partition
#partition.assignment.strategy=org.apache.kafka.clients.consumer.RangeAssignor
#TCP receive buffer
receive.buffer.bytes=65536
#客户端请求服务端的超时时间
request.timeout.ms=305000
#TCP send buffer
send.buffer.bytes=131072
#自动提交的间隔时间
auto.commit.interval.ms=5000
#校验消息完整性
check.crcs=true
client.id="vv"
#服务端最大等待时间，知道有足够的消息(fetch.min.bytes)返回给consumer
fetch.max.wait.ms=500
#休息指定时间后重连
reconnect.backoff.ms=50
#休息指定时间后重试
retry.backoff.ms=100
